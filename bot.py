import logging
import json
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentTypes
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.executor import start_polling
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import API_TOKEN, ADMIN_ID, STORAGE_CHAT_ID
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–æ–≤
mods = {}
current_page = 1
mods_per_page = 5
sort_mode = "default"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
query = None  # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
user_message_ids = {}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
MODS_FILE = 'mods.json'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
class ModUpload(StatesGroup):
    waiting_for_template_and_archive = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_mods():
    if os.path.exists(MODS_FILE):
        with open(MODS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_mods():
    with open(MODS_FILE, 'w', encoding='utf-8') as f:
        json.dump(mods, f, ensure_ascii=False, indent=4)

# –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def clear_user_messages(chat_id):
    if chat_id in user_message_ids:
        for msg_id in user_message_ids[chat_id]:
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_message_ids[chat_id] = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def generate_reply_keyboard(is_admin=False):
    keyboard = [[types.KeyboardButton("/start")]]
    if is_admin:
        keyboard.append([types.KeyboardButton("/upload")])
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    global query
    query = None  # –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    await clear_user_messages(message.chat.id)  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_admin = message.from_user.id == ADMIN_ID

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = generate_reply_keyboard(is_admin=is_admin)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    msg = await message.answer(
        "ü¶á|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—É—Å—Å–∫–∏–π Baldur Gate 3! \n\nüíæ|–≠—Ç–æ –±–æ–ª—å—à–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö \nüõ†|—Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π. \n\nüá∑üá∫|–ú—ã —Ä–∞–¥—ã –¥–∞—Ä–∏—Ç—å –≤–∞–º —Ä—É-–º–æ–¥—ã, \nüõ†|–∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫ –º–∞–ª–æ.",
        reply_markup=reply_markup,
    )
    user_message_ids[message.chat.id] = [msg.message_id, message.message_id]
    await list_mods(message)

async def list_mods(message: types.Message):
    global current_page, query
    query = None  # –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    await send_mods_page(message, current_page)

# –ù–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_query = State()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–æ–¥–∞–º–∏
async def send_mods_page(message_or_callback, page, search_query=None):
    global mods_per_page, sort_mode, query
    query = search_query or query
    mod_list = list(mods.values())

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_mode == "downloads":
        mod_list = sorted(mod_list, key=lambda x: x.get("downloads", 0), reverse=True)
    elif sort_mode == "newest":
        mod_list = sorted(mod_list, key=lambda x: x.get("created_at", ""), reverse=True)
    elif sort_mode == "random":
        random.shuffle(mod_list)

    # –ü–æ–∏—Å–∫
    if query:
        mod_list = [mod for mod in mod_list if query.lower() in mod['name'].lower() or 
                    query.lower() in mod['description'].lower() or
                    query.lower() in mod['author'].lower()]

    total_pages = max(1, (len(mod_list) + mods_per_page - 1) // mods_per_page)
    if page < 1 or page > total_pages:
        return

    start_index = (page - 1) * mods_per_page
    end_index = start_index + mods_per_page
    page_mods = mod_list[start_index:end_index]

    mod_text = f"‚ôªÔ∏è–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_mode.capitalize()} | üìå–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
    if page_mods:
        mod_text += "\n\n".join([
            f"üè∑–ù–∞–∑–≤–∞–Ω–∏–µ: {mod['name']}\nüíΩ–û–ø–∏—Å–∞–Ω–∏–µ: {mod['description']}üá∑üá∫\nüë§–ê–≤—Ç–æ—Ä: {mod['author']} (–°–∫–∞—á–∏–≤–∞–Ω–∏—è: {mod.get('downloads', 0)})"
            for mod in page_mods
        ])
    else:
        mod_text += "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    markup = InlineKeyboardMarkup(row_width=3)
    for mod in page_mods:
        markup.add(InlineKeyboardButton(mod['name'], callback_data=f"mod_{mod['name']}"))

    if page > 1:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if page < total_pages:
        markup.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page + 1}"))

    markup.row(
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_query"),
        InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏—è", callback_data="sort_downloads"),
        InlineKeyboardButton("üÜï –ù–æ–≤–∏–∑–Ω–∞", callback_data="sort_newest"),
        InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º", callback_data="sort_random")
    )

    if isinstance(message_or_callback, types.Message):
        msg = await message_or_callback.answer(mod_text, reply_markup=markup)
        user_message_ids[message_or_callback.chat.id].append(msg.message_id)
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(mod_text, reply_markup=markup)

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
@dp.message_handler(commands=['upload'], user_id=ADMIN_ID)
async def upload_mod(message: types.Message):
    await ModUpload.waiting_for_template_and_archive.set()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å —à–∞–±–ª–æ–Ω–æ–º –º–æ–¥–∞ –∏ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: MyMod\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥ –¥–ª—è –∏–≥—Ä—ã\n"
        "–ê–≤—Ç–æ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n\n"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üîç –ü–æ–∏—Å–∫"
@dp.callback_query_handler(lambda c: c.data == "search_query")
async def start_search(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (üè∑–Ω–∞–∑–≤–∞–Ω–∏–µ, üíΩ–æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ üë§–∞–≤—Ç–æ—Ä):")
    await SearchState.waiting_for_query.set()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(state=SearchState.waiting_for_query, content_types=ContentTypes.TEXT)
async def handle_search_query(message: types.Message, state: FSMContext):
    global query
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∏—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await send_mods_page(message, 1, search_query=query)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith("page_"))
async def change_page(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[1])
    await send_mods_page(callback_query, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("sort_"))
async def sort_mods_callback(callback_query: types.CallbackQuery):
    global sort_mode, current_page
    sort_mode = callback_query.data.split("_")[1]
    current_page = 1
    await send_mods_page(callback_query, current_page)
    await callback_query.answer("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


# –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–∞
@dp.message_handler(commands=['search'])
async def search_mods(message: types.Message):
    global query
    query = message.get_args()
    if not query:
        await message.answer("üîé–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/search MyMod`")
        return
    await send_mods_page(message, 1, search_query=query)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith("mod_"))
async def show_mod_details(callback_query: types.CallbackQuery):
    mod_name = callback_query.data[4:]
    mod_info = mods.get(mod_name)
    if mod_info:
        mod_info['downloads'] = mod_info.get('downloads', 0) + 1
        save_mods()
        file_id = mod_info['file_id']
        caption = (f"–ú–æ–¥: {mod_info['name']}\n"
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {mod_info['description']}\n"
                   f"–ê–≤—Ç–æ—Ä: {mod_info['author']}\n"
                   f"–°–∫–∞—á–∏–≤–∞–Ω–∏–π: {mod_info['downloads']}")
        await bot.send_document(chat_id=callback_query.message.chat.id, document=file_id, caption=caption)
    else:
        await callback_query.message.answer("–ú–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback_query.answer()

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
@dp.message_handler(commands=['upload'], user_id=ADMIN_ID)
async def upload_mod(message: types.Message):
    await ModUpload.waiting_for_template_and_archive.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å —à–∞–±–ª–æ–Ω–æ–º –º–æ–¥–∞ (–ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –ê–≤—Ç–æ—Ä) –∏ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

@dp.message_handler(state=ModUpload.waiting_for_template_and_archive, content_types=ContentTypes.DOCUMENT)
async def process_archive_with_caption(message: types.Message, state: FSMContext):
    if not message.caption:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ...\n–û–ø–∏—Å–∞–Ω–∏–µ: ...\n–ê–≤—Ç–æ—Ä: ...")
        return
    caption = message.caption.split("\n")
    try:
        name = caption[0].split(":")[1].strip()
        description = caption[1].split(":")[1].strip()
        author = caption[2].split(":")[1].strip()
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏.")
        return

    file_id = message.document.file_id
    mod_info = {
        'name': name,
        'description': description,
        'author': author,
        'file_id': file_id,
        'created_at': datetime.now().isoformat(),
        'downloads': 0
    }
    mods[name] = mod_info
    save_mods()
    await state.finish()
    await message.answer(f"–ú–æ–¥ '{name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

if __name__ == '__main__':
    mods = load_mods()
    start_polling(dp, skip_updates=True)
